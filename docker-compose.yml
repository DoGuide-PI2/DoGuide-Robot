# Docker Compose description of the combined application.
#
# 'docker-compose up' will run this.
version: '3'
volumes:
  picamera:
services:
  
  rabbitmq:
    image: 'rabbitmq:3.9-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    # networks:
    #   - network

  camera:
    build: 
      context: './src/modules/lowLevel/camera'
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    volumes:
      - /opt/vc:/opt/vc
    environment:
      - LD_LIBRARY_PATH=/opt/vc/lib
    devices:
      - /dev/video0:/dev/video0
      - /dev/vchiq:/dev/vchiq
    privileged: true


    # networks:
    #   - network

  sensors:
    build: 
      context: './src/modules/lowLevel/sensors'
      dockerfile: sensors.Dockerfile
    ports:
      - '5001:5001'

    # networks:
    #   - network


  # consumer:
  #   # If needed, Docker Compose will automatically run consumer/Dockerfile.
  #   build: consumer

  #   # Environment variables:
  #   environment:
  #     # The location of the RabbitMQ server.  "amqp" is the protocol;
  #     # "rabbitmq" is the hostname.  Note that there is not a guarantee
  #     # that the server will start first!  Telling the pika client library
  #     # to try multiple times gets around this ordering issue.
  #     AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'

  #   # Again, run on the private network.  Needed to see the "rabbitmq"
  #   # magic Docker DNS name.
  #   networks:
  #     - network

  # publisher:
  #   # Identical to the consumer.
  #   build: publisher
  #   environment:
  #     AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
  #   networks:
  #     - network


# networks:
#   network: {}